{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "a439fa67",
      "metadata": {
        "id": "a439fa67"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy import stats\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "giN9RicVnVu5",
        "outputId": "67728a6b-578d-48b3-d412-4a2480b21bca"
      },
      "id": "giN9RicVnVu5",
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "id": "8b9f1684",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8b9f1684",
        "outputId": "2637c6dd-b89a-4d19-9897-4f33b08070f0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-32-c7bd5f3812ab>:2: MatplotlibDeprecationWarning: The seaborn styles shipped by Matplotlib are deprecated since 3.6, as they no longer correspond to the styles shipped by seaborn. However, they will remain available as 'seaborn-v0_8-<style>'. Alternatively, directly use the seaborn API instead.\n",
            "  plt.style.use('seaborn')\n"
          ]
        }
      ],
      "source": [
        "# set theme\n",
        "plt.style.use('seaborn')\n",
        "sns.set_style('darkgrid')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "id": "355a2b16",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "355a2b16",
        "outputId": "4003d5e9-e050-4d2f-9ff4-8e2dfc87941a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/pandas/core/internals/blocks.py:351: RuntimeWarning: invalid value encountered in log\n",
            "  result = func(self.values, **kwargs)\n"
          ]
        }
      ],
      "source": [
        "prices = pd.read_csv('/content/drive/MyDrive/final_data_norm.csv', index_col=0)\n",
        "prices = prices.dropna(axis=1)\n",
        "returns = np.log(prices).diff().dropna()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "returns.head(1000)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 2299
        },
        "id": "lg4YKJwBpGro",
        "outputId": "624c9831-b625-4439-9ba4-d1fcf84ba2bd"
      },
      "id": "lg4YKJwBpGro",
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Instr1    Instr2    Instr3    Instr4    Instr5    Instr6  \\\n",
              "Timestamp                                                                \n",
              "1/15/2018   0.130973  0.158917  0.181080  0.207595  0.228823  0.246988   \n",
              "1/16/2018  -0.429846 -0.419833 -0.417336 -0.417719 -0.415104 -0.425432   \n",
              "1/17/2018   0.105508  0.103738  0.095824  0.082884  0.080662  0.085540   \n",
              "1/18/2018  -0.030949 -0.036490 -0.027796 -0.018893 -0.009734  0.005111   \n",
              "1/19/2018  -0.377359 -0.379642 -0.391759 -0.391912 -0.397026 -0.402511   \n",
              "...              ...       ...       ...       ...       ...       ...   \n",
              "11/30/2023 -0.017001 -0.133952 -0.132479 -0.133290 -0.133490 -0.135119   \n",
              "12-01-2023 -0.288805 -0.160526 -0.150277 -0.139047 -0.131152 -0.126717   \n",
              "12-04-2023 -0.074780 -0.060090 -0.047191 -0.037373 -0.027929 -0.019606   \n",
              "12-05-2023 -0.078849 -0.082977 -0.087413 -0.090269 -0.090618 -0.090606   \n",
              "12-06-2023 -0.182777 -0.168145 -0.161100 -0.153885 -0.149228 -0.142453   \n",
              "\n",
              "              Instr7    Instr8    Instr9   Instr10   Instr11   Instr12  \\\n",
              "Timestamp                                                                \n",
              "1/15/2018   0.270307  0.295741  0.326552  0.368944  0.404288  0.454698   \n",
              "1/16/2018  -0.441959 -0.467667 -0.506398 -0.553157 -0.592455 -0.652314   \n",
              "1/17/2018   0.092262  0.101829  0.114445  0.131652  0.146471  0.178561   \n",
              "1/18/2018   0.016390  0.023916  0.033235  0.045220  0.049831  0.065164   \n",
              "1/19/2018  -0.417619 -0.446892 -0.476731 -0.532136 -0.575343 -0.615504   \n",
              "...              ...       ...       ...       ...       ...       ...   \n",
              "11/30/2023 -0.134287 -0.133687 -0.133264 -0.132920 -0.131467 -0.130836   \n",
              "12-01-2023 -0.124730 -0.123797 -0.122229 -0.121553 -0.121059 -0.119927   \n",
              "12-04-2023 -0.013045 -0.006529 -0.002456  0.000823  0.003316  0.005017   \n",
              "12-05-2023 -0.091008 -0.090795 -0.088208 -0.086734 -0.084575 -0.082551   \n",
              "12-06-2023 -0.139644 -0.138248 -0.139052 -0.131137 -0.130650 -0.132502   \n",
              "\n",
              "             Instr13   Instr16   Instr17  \n",
              "Timestamp                                 \n",
              "1/15/2018   0.539169  1.077763  1.390907  \n",
              "1/16/2018  -0.743011 -1.345539 -1.646136  \n",
              "1/17/2018   0.226631  0.547690  0.744257  \n",
              "1/18/2018   0.086294  0.200453  0.243942  \n",
              "1/19/2018  -0.706003 -1.232356 -1.510860  \n",
              "...              ...       ...       ...  \n",
              "11/30/2023 -0.131010 -0.127890 -0.126342  \n",
              "12-01-2023 -0.118935 -0.114006 -0.112590  \n",
              "12-04-2023  0.008441  0.012947  0.013058  \n",
              "12-05-2023 -0.080480 -0.075689 -0.075426  \n",
              "12-06-2023 -0.118835 -0.049297 -0.126072  \n",
              "\n",
              "[863 rows x 15 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b15fe8eb-f521-40bc-8e5d-a9ce2820e58c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Instr1</th>\n",
              "      <th>Instr2</th>\n",
              "      <th>Instr3</th>\n",
              "      <th>Instr4</th>\n",
              "      <th>Instr5</th>\n",
              "      <th>Instr6</th>\n",
              "      <th>Instr7</th>\n",
              "      <th>Instr8</th>\n",
              "      <th>Instr9</th>\n",
              "      <th>Instr10</th>\n",
              "      <th>Instr11</th>\n",
              "      <th>Instr12</th>\n",
              "      <th>Instr13</th>\n",
              "      <th>Instr16</th>\n",
              "      <th>Instr17</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1/15/2018</th>\n",
              "      <td>0.130973</td>\n",
              "      <td>0.158917</td>\n",
              "      <td>0.181080</td>\n",
              "      <td>0.207595</td>\n",
              "      <td>0.228823</td>\n",
              "      <td>0.246988</td>\n",
              "      <td>0.270307</td>\n",
              "      <td>0.295741</td>\n",
              "      <td>0.326552</td>\n",
              "      <td>0.368944</td>\n",
              "      <td>0.404288</td>\n",
              "      <td>0.454698</td>\n",
              "      <td>0.539169</td>\n",
              "      <td>1.077763</td>\n",
              "      <td>1.390907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/16/2018</th>\n",
              "      <td>-0.429846</td>\n",
              "      <td>-0.419833</td>\n",
              "      <td>-0.417336</td>\n",
              "      <td>-0.417719</td>\n",
              "      <td>-0.415104</td>\n",
              "      <td>-0.425432</td>\n",
              "      <td>-0.441959</td>\n",
              "      <td>-0.467667</td>\n",
              "      <td>-0.506398</td>\n",
              "      <td>-0.553157</td>\n",
              "      <td>-0.592455</td>\n",
              "      <td>-0.652314</td>\n",
              "      <td>-0.743011</td>\n",
              "      <td>-1.345539</td>\n",
              "      <td>-1.646136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/17/2018</th>\n",
              "      <td>0.105508</td>\n",
              "      <td>0.103738</td>\n",
              "      <td>0.095824</td>\n",
              "      <td>0.082884</td>\n",
              "      <td>0.080662</td>\n",
              "      <td>0.085540</td>\n",
              "      <td>0.092262</td>\n",
              "      <td>0.101829</td>\n",
              "      <td>0.114445</td>\n",
              "      <td>0.131652</td>\n",
              "      <td>0.146471</td>\n",
              "      <td>0.178561</td>\n",
              "      <td>0.226631</td>\n",
              "      <td>0.547690</td>\n",
              "      <td>0.744257</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/18/2018</th>\n",
              "      <td>-0.030949</td>\n",
              "      <td>-0.036490</td>\n",
              "      <td>-0.027796</td>\n",
              "      <td>-0.018893</td>\n",
              "      <td>-0.009734</td>\n",
              "      <td>0.005111</td>\n",
              "      <td>0.016390</td>\n",
              "      <td>0.023916</td>\n",
              "      <td>0.033235</td>\n",
              "      <td>0.045220</td>\n",
              "      <td>0.049831</td>\n",
              "      <td>0.065164</td>\n",
              "      <td>0.086294</td>\n",
              "      <td>0.200453</td>\n",
              "      <td>0.243942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1/19/2018</th>\n",
              "      <td>-0.377359</td>\n",
              "      <td>-0.379642</td>\n",
              "      <td>-0.391759</td>\n",
              "      <td>-0.391912</td>\n",
              "      <td>-0.397026</td>\n",
              "      <td>-0.402511</td>\n",
              "      <td>-0.417619</td>\n",
              "      <td>-0.446892</td>\n",
              "      <td>-0.476731</td>\n",
              "      <td>-0.532136</td>\n",
              "      <td>-0.575343</td>\n",
              "      <td>-0.615504</td>\n",
              "      <td>-0.706003</td>\n",
              "      <td>-1.232356</td>\n",
              "      <td>-1.510860</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11/30/2023</th>\n",
              "      <td>-0.017001</td>\n",
              "      <td>-0.133952</td>\n",
              "      <td>-0.132479</td>\n",
              "      <td>-0.133290</td>\n",
              "      <td>-0.133490</td>\n",
              "      <td>-0.135119</td>\n",
              "      <td>-0.134287</td>\n",
              "      <td>-0.133687</td>\n",
              "      <td>-0.133264</td>\n",
              "      <td>-0.132920</td>\n",
              "      <td>-0.131467</td>\n",
              "      <td>-0.130836</td>\n",
              "      <td>-0.131010</td>\n",
              "      <td>-0.127890</td>\n",
              "      <td>-0.126342</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12-01-2023</th>\n",
              "      <td>-0.288805</td>\n",
              "      <td>-0.160526</td>\n",
              "      <td>-0.150277</td>\n",
              "      <td>-0.139047</td>\n",
              "      <td>-0.131152</td>\n",
              "      <td>-0.126717</td>\n",
              "      <td>-0.124730</td>\n",
              "      <td>-0.123797</td>\n",
              "      <td>-0.122229</td>\n",
              "      <td>-0.121553</td>\n",
              "      <td>-0.121059</td>\n",
              "      <td>-0.119927</td>\n",
              "      <td>-0.118935</td>\n",
              "      <td>-0.114006</td>\n",
              "      <td>-0.112590</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12-04-2023</th>\n",
              "      <td>-0.074780</td>\n",
              "      <td>-0.060090</td>\n",
              "      <td>-0.047191</td>\n",
              "      <td>-0.037373</td>\n",
              "      <td>-0.027929</td>\n",
              "      <td>-0.019606</td>\n",
              "      <td>-0.013045</td>\n",
              "      <td>-0.006529</td>\n",
              "      <td>-0.002456</td>\n",
              "      <td>0.000823</td>\n",
              "      <td>0.003316</td>\n",
              "      <td>0.005017</td>\n",
              "      <td>0.008441</td>\n",
              "      <td>0.012947</td>\n",
              "      <td>0.013058</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12-05-2023</th>\n",
              "      <td>-0.078849</td>\n",
              "      <td>-0.082977</td>\n",
              "      <td>-0.087413</td>\n",
              "      <td>-0.090269</td>\n",
              "      <td>-0.090618</td>\n",
              "      <td>-0.090606</td>\n",
              "      <td>-0.091008</td>\n",
              "      <td>-0.090795</td>\n",
              "      <td>-0.088208</td>\n",
              "      <td>-0.086734</td>\n",
              "      <td>-0.084575</td>\n",
              "      <td>-0.082551</td>\n",
              "      <td>-0.080480</td>\n",
              "      <td>-0.075689</td>\n",
              "      <td>-0.075426</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12-06-2023</th>\n",
              "      <td>-0.182777</td>\n",
              "      <td>-0.168145</td>\n",
              "      <td>-0.161100</td>\n",
              "      <td>-0.153885</td>\n",
              "      <td>-0.149228</td>\n",
              "      <td>-0.142453</td>\n",
              "      <td>-0.139644</td>\n",
              "      <td>-0.138248</td>\n",
              "      <td>-0.139052</td>\n",
              "      <td>-0.131137</td>\n",
              "      <td>-0.130650</td>\n",
              "      <td>-0.132502</td>\n",
              "      <td>-0.118835</td>\n",
              "      <td>-0.049297</td>\n",
              "      <td>-0.126072</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>863 rows × 15 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b15fe8eb-f521-40bc-8e5d-a9ce2820e58c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b15fe8eb-f521-40bc-8e5d-a9ce2820e58c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b15fe8eb-f521-40bc-8e5d-a9ce2820e58c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f1c44da8-2e3d-4139-92bf-47c0426ddbc3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f1c44da8-2e3d-4139-92bf-47c0426ddbc3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f1c44da8-2e3d-4139-92bf-47c0426ddbc3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "id": "73b6d20a",
      "metadata": {
        "id": "73b6d20a"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "prices_form = prices.loc['11/20/2018':'5/19/2020']\n",
        "prices_trade = prices.loc['5/20/2021':'11/19/2021']\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prices_form.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 257
        },
        "id": "8y7gjPXfrUjr",
        "outputId": "f152f413-b7c5-475d-af86-b1a62d1f6a43"
      },
      "id": "8y7gjPXfrUjr",
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Instr1    Instr2    Instr3    Instr4    Instr5    Instr6  \\\n",
              "Timestamp                                                                \n",
              "11/20/2018 -0.241640 -0.217275 -0.196079 -0.176944 -0.157653 -0.141625   \n",
              "11/21/2018 -0.191221 -0.162505 -0.138024 -0.115637 -0.093125 -0.072660   \n",
              "11/22/2018 -0.237925 -0.215063 -0.192630 -0.171587 -0.149664 -0.129604   \n",
              "11/23/2018 -0.439599 -0.427504 -0.415653 -0.402532 -0.388109 -0.373197   \n",
              "11/26/2018 -0.350438 -0.343413 -0.331732 -0.318606 -0.303301 -0.287148   \n",
              "\n",
              "              Instr7    Instr8    Instr9   Instr10   Instr11   Instr12  \\\n",
              "Timestamp                                                                \n",
              "11/20/2018 -0.128288 -0.119691 -0.115212 -0.110266 -0.105645 -0.102276   \n",
              "11/21/2018 -0.055522 -0.043110 -0.034788 -0.026674 -0.018892 -0.012358   \n",
              "11/22/2018 -0.112696 -0.100379 -0.091358 -0.082402 -0.073646 -0.066019   \n",
              "11/23/2018 -0.360231 -0.350766 -0.344897 -0.338750 -0.331060 -0.325621   \n",
              "11/26/2018 -0.273171 -0.263530 -0.256976 -0.250282 -0.243596 -0.238604   \n",
              "\n",
              "             Instr13   Instr16   Instr17  \n",
              "Timestamp                                 \n",
              "11/20/2018 -0.095492 -0.071803 -0.063460  \n",
              "11/21/2018 -0.002391  0.029717  0.039916  \n",
              "11/22/2018 -0.055592 -0.021043 -0.009386  \n",
              "11/23/2018 -0.315685 -0.283435 -0.272599  \n",
              "11/26/2018 -0.228494 -0.195971 -0.186717  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b4420e98-0963-4951-bb6e-b87a6bbe1a63\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Instr1</th>\n",
              "      <th>Instr2</th>\n",
              "      <th>Instr3</th>\n",
              "      <th>Instr4</th>\n",
              "      <th>Instr5</th>\n",
              "      <th>Instr6</th>\n",
              "      <th>Instr7</th>\n",
              "      <th>Instr8</th>\n",
              "      <th>Instr9</th>\n",
              "      <th>Instr10</th>\n",
              "      <th>Instr11</th>\n",
              "      <th>Instr12</th>\n",
              "      <th>Instr13</th>\n",
              "      <th>Instr16</th>\n",
              "      <th>Instr17</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11/20/2018</th>\n",
              "      <td>-0.241640</td>\n",
              "      <td>-0.217275</td>\n",
              "      <td>-0.196079</td>\n",
              "      <td>-0.176944</td>\n",
              "      <td>-0.157653</td>\n",
              "      <td>-0.141625</td>\n",
              "      <td>-0.128288</td>\n",
              "      <td>-0.119691</td>\n",
              "      <td>-0.115212</td>\n",
              "      <td>-0.110266</td>\n",
              "      <td>-0.105645</td>\n",
              "      <td>-0.102276</td>\n",
              "      <td>-0.095492</td>\n",
              "      <td>-0.071803</td>\n",
              "      <td>-0.063460</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11/21/2018</th>\n",
              "      <td>-0.191221</td>\n",
              "      <td>-0.162505</td>\n",
              "      <td>-0.138024</td>\n",
              "      <td>-0.115637</td>\n",
              "      <td>-0.093125</td>\n",
              "      <td>-0.072660</td>\n",
              "      <td>-0.055522</td>\n",
              "      <td>-0.043110</td>\n",
              "      <td>-0.034788</td>\n",
              "      <td>-0.026674</td>\n",
              "      <td>-0.018892</td>\n",
              "      <td>-0.012358</td>\n",
              "      <td>-0.002391</td>\n",
              "      <td>0.029717</td>\n",
              "      <td>0.039916</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11/22/2018</th>\n",
              "      <td>-0.237925</td>\n",
              "      <td>-0.215063</td>\n",
              "      <td>-0.192630</td>\n",
              "      <td>-0.171587</td>\n",
              "      <td>-0.149664</td>\n",
              "      <td>-0.129604</td>\n",
              "      <td>-0.112696</td>\n",
              "      <td>-0.100379</td>\n",
              "      <td>-0.091358</td>\n",
              "      <td>-0.082402</td>\n",
              "      <td>-0.073646</td>\n",
              "      <td>-0.066019</td>\n",
              "      <td>-0.055592</td>\n",
              "      <td>-0.021043</td>\n",
              "      <td>-0.009386</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11/23/2018</th>\n",
              "      <td>-0.439599</td>\n",
              "      <td>-0.427504</td>\n",
              "      <td>-0.415653</td>\n",
              "      <td>-0.402532</td>\n",
              "      <td>-0.388109</td>\n",
              "      <td>-0.373197</td>\n",
              "      <td>-0.360231</td>\n",
              "      <td>-0.350766</td>\n",
              "      <td>-0.344897</td>\n",
              "      <td>-0.338750</td>\n",
              "      <td>-0.331060</td>\n",
              "      <td>-0.325621</td>\n",
              "      <td>-0.315685</td>\n",
              "      <td>-0.283435</td>\n",
              "      <td>-0.272599</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11/26/2018</th>\n",
              "      <td>-0.350438</td>\n",
              "      <td>-0.343413</td>\n",
              "      <td>-0.331732</td>\n",
              "      <td>-0.318606</td>\n",
              "      <td>-0.303301</td>\n",
              "      <td>-0.287148</td>\n",
              "      <td>-0.273171</td>\n",
              "      <td>-0.263530</td>\n",
              "      <td>-0.256976</td>\n",
              "      <td>-0.250282</td>\n",
              "      <td>-0.243596</td>\n",
              "      <td>-0.238604</td>\n",
              "      <td>-0.228494</td>\n",
              "      <td>-0.195971</td>\n",
              "      <td>-0.186717</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4420e98-0963-4951-bb6e-b87a6bbe1a63')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b4420e98-0963-4951-bb6e-b87a6bbe1a63 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b4420e98-0963-4951-bb6e-b87a6bbe1a63');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bb154673-23e8-4f32-9810-3d3a847eb5af\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bb154673-23e8-4f32-9810-3d3a847eb5af')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bb154673-23e8-4f32-9810-3d3a847eb5af button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 85
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prices_form.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 149
        },
        "id": "CEJfRRndpeN4",
        "outputId": "1c9cc33b-cf41-434c-b56c-65b63912efc6"
      },
      "id": "CEJfRRndpeN4",
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Instr1    Instr2    Instr3    Instr4    Instr5    Instr6  \\\n",
              "Timestamp                                                                \n",
              "03-11-2016 -1.416659 -1.420558 -1.426727 -1.426903 -1.424853 -1.421595   \n",
              "\n",
              "              Instr7    Instr8    Instr9   Instr10   Instr11   Instr12  \\\n",
              "Timestamp                                                                \n",
              "03-11-2016 -1.414042 -1.403588 -1.393133 -1.382952 -1.372094 -1.360408   \n",
              "\n",
              "             Instr13   Instr16   Instr17  \n",
              "Timestamp                                 \n",
              "03-11-2016 -1.351622 -1.325976 -1.319087  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7a361eb1-f9c5-49f9-b9d0-658550eb7664\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Instr1</th>\n",
              "      <th>Instr2</th>\n",
              "      <th>Instr3</th>\n",
              "      <th>Instr4</th>\n",
              "      <th>Instr5</th>\n",
              "      <th>Instr6</th>\n",
              "      <th>Instr7</th>\n",
              "      <th>Instr8</th>\n",
              "      <th>Instr9</th>\n",
              "      <th>Instr10</th>\n",
              "      <th>Instr11</th>\n",
              "      <th>Instr12</th>\n",
              "      <th>Instr13</th>\n",
              "      <th>Instr16</th>\n",
              "      <th>Instr17</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>03-11-2016</th>\n",
              "      <td>-1.416659</td>\n",
              "      <td>-1.420558</td>\n",
              "      <td>-1.426727</td>\n",
              "      <td>-1.426903</td>\n",
              "      <td>-1.424853</td>\n",
              "      <td>-1.421595</td>\n",
              "      <td>-1.414042</td>\n",
              "      <td>-1.403588</td>\n",
              "      <td>-1.393133</td>\n",
              "      <td>-1.382952</td>\n",
              "      <td>-1.372094</td>\n",
              "      <td>-1.360408</td>\n",
              "      <td>-1.351622</td>\n",
              "      <td>-1.325976</td>\n",
              "      <td>-1.319087</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7a361eb1-f9c5-49f9-b9d0-658550eb7664')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7a361eb1-f9c5-49f9-b9d0-658550eb7664 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7a361eb1-f9c5-49f9-b9d0-658550eb7664');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "returns_form = returns.loc['11-12-2018':'5/28/2019']\n",
        "returns_trade = returns.loc['05-12-2021':'11/19/2021']"
      ],
      "metadata": {
        "id": "mErhAlsE49dJ"
      },
      "id": "mErhAlsE49dJ",
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 103,
      "id": "bd15e161",
      "metadata": {
        "id": "bd15e161"
      },
      "outputs": [],
      "source": [
        "\n",
        "# Calculate Kendall's tau for each pair of stocks\n",
        "results = pd.DataFrame(columns=['tau'])\n",
        "\n",
        "for s1 in returns_form.columns:\n",
        "    for s2 in returns_form.columns:\n",
        "        if (s1!=s2) and (f'{s2}-{s1}' not in results.index):\n",
        "            results.loc[f'{s1}-{s2}'] = stats.kendalltau(returns_form[s1], returns_form[s2])[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 104,
      "id": "7c42fa0b",
      "metadata": {
        "id": "7c42fa0b"
      },
      "outputs": [],
      "source": [
        "results.to_csv('pairs_tau.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "id": "19f3b4e9",
      "metadata": {
        "id": "19f3b4e9"
      },
      "outputs": [],
      "source": [
        "results = pd.read_csv('pairs_tau.csv', index_col=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "id": "62a1f76e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "62a1f76e",
        "outputId": "bc3a7805-b848-4541-897a-87eab55c6c21"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      tau\n",
              "Instr1-Instr17   0.624150\n",
              "Instr1-Instr16   0.649660\n",
              "Instr2-Instr17   0.695578\n",
              "Instr1-Instr13   0.698980\n",
              "Instr1-Instr12   0.707483\n",
              "...                   ...\n",
              "Instr9-Instr10   0.976190\n",
              "Instr7-Instr8    0.981293\n",
              "Instr12-Instr13  0.984694\n",
              "Instr11-Instr12  0.988095\n",
              "Instr8-Instr9    0.988095\n",
              "\n",
              "[105 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c107052c-02a9-4350-b35b-4c8aaea2cb5c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tau</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr17</th>\n",
              "      <td>0.624150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr16</th>\n",
              "      <td>0.649660</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr2-Instr17</th>\n",
              "      <td>0.695578</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr13</th>\n",
              "      <td>0.698980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr12</th>\n",
              "      <td>0.707483</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr9-Instr10</th>\n",
              "      <td>0.976190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr7-Instr8</th>\n",
              "      <td>0.981293</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr12-Instr13</th>\n",
              "      <td>0.984694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr11-Instr12</th>\n",
              "      <td>0.988095</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr8-Instr9</th>\n",
              "      <td>0.988095</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>105 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c107052c-02a9-4350-b35b-4c8aaea2cb5c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c107052c-02a9-4350-b35b-4c8aaea2cb5c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c107052c-02a9-4350-b35b-4c8aaea2cb5c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8f0ab531-e8da-4076-a65f-0778f70adf01\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f0ab531-e8da-4076-a65f-0778f70adf01')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8f0ab531-e8da-4076-a65f-0778f70adf01 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ],
      "source": [
        "results.sort_values(by='tau')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "id": "009fe8e4",
      "metadata": {
        "id": "009fe8e4"
      },
      "outputs": [],
      "source": [
        "def parse_pair(pair):\n",
        "    s1 = pair[:pair.find('-')]\n",
        "    s2 = pair[pair.find('-')+1:]\n",
        "    return s1,s2"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "id": "c04ace25",
      "metadata": {
        "id": "c04ace25"
      },
      "outputs": [],
      "source": [
        "selected_stocks = []\n",
        "selected_pairs = []\n",
        "\n",
        "for pair in results.sort_values(by='tau', ascending=False).index:\n",
        "    s1,s2 = parse_pair(pair)\n",
        "    if (s1 not in selected_stocks) and (s2 not in selected_stocks):\n",
        "        selected_stocks.append(s1)\n",
        "        selected_stocks.append(s2)\n",
        "        selected_pairs.append(pair)\n",
        "\n",
        "    if len(selected_pairs) == 25:\n",
        "        break"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 109,
      "id": "d945eef0",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d945eef0",
        "outputId": "4210aefd-c12f-433b-d13f-02a45b6d676f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Instr11-Instr12', 'Instr8-Instr9', 'Instr5-Instr6', 'Instr16-Instr17', 'Instr3-Instr4', 'Instr7-Instr10', 'Instr1-Instr2']\n"
          ]
        }
      ],
      "source": [
        "print(selected_pairs)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6cd76ed1",
      "metadata": {
        "id": "6cd76ed1"
      },
      "source": [
        "# Fit marginals"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "id": "59ec30a6",
      "metadata": {
        "id": "59ec30a6"
      },
      "outputs": [],
      "source": [
        "marginals_df = pd.DataFrame(index=selected_stocks, columns=['Distribution', 'AIC', 'BIC', 'KS_pvalue'])\n",
        "\n",
        "for stock in selected_stocks:\n",
        "    data = returns_form[stock]\n",
        "    dists = ['Normal', \"Student's t\", 'Logistic', 'Extreme']\n",
        "    best_aic = np.inf\n",
        "    for dist,name in zip([stats.norm, stats.t, stats.genlogistic, stats.genextreme], dists):\n",
        "        params = dist.fit(data)\n",
        "        dist_fit = dist(*params)\n",
        "        log_like = np.log(dist_fit.pdf(data)).sum()\n",
        "        aic = 2*len(params) - 2 * log_like\n",
        "        if aic<best_aic:\n",
        "            best_dist = name\n",
        "            best_aic = aic\n",
        "            best_bic = len(params) * np.log(len(data)) - 2 * log_like\n",
        "            ks_pval = stats.kstest(data, dist_fit.cdf, N=100)[1]\n",
        "    marginals_df.loc[stock] = [best_dist, best_aic, best_bic, ks_pval]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "id": "01160441",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "01160441",
        "outputId": "efeffb7d-fb99-4cb4-c799-e7f8fcc53a37"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Distribution        AIC        BIC KS_pvalue\n",
              "Instr11       Normal  18.668491  22.452132  0.857479\n",
              "Instr12     Logistic   20.00376  25.679221  0.950316\n",
              "Instr8        Normal  24.349663  28.133304  0.861912\n",
              "Instr9        Normal  21.365813  25.149454  0.893472\n",
              "Instr5      Logistic  35.434551  41.110012  0.624959\n",
              "Instr6      Logistic  31.713455  37.388916  0.771655\n",
              "Instr16  Student's t   28.08629  33.761751  0.989581\n",
              "Instr17  Student's t  35.282557  40.958018  0.982366\n",
              "Instr3   Student's t  41.861609   47.53707  0.975836\n",
              "Instr4   Student's t  39.930366  45.605827  0.939207"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d9beec67-1ab5-4d7d-8cd3-d834978f9559\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Distribution</th>\n",
              "      <th>AIC</th>\n",
              "      <th>BIC</th>\n",
              "      <th>KS_pvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Instr11</th>\n",
              "      <td>Normal</td>\n",
              "      <td>18.668491</td>\n",
              "      <td>22.452132</td>\n",
              "      <td>0.857479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr12</th>\n",
              "      <td>Logistic</td>\n",
              "      <td>20.00376</td>\n",
              "      <td>25.679221</td>\n",
              "      <td>0.950316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr8</th>\n",
              "      <td>Normal</td>\n",
              "      <td>24.349663</td>\n",
              "      <td>28.133304</td>\n",
              "      <td>0.861912</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr9</th>\n",
              "      <td>Normal</td>\n",
              "      <td>21.365813</td>\n",
              "      <td>25.149454</td>\n",
              "      <td>0.893472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr5</th>\n",
              "      <td>Logistic</td>\n",
              "      <td>35.434551</td>\n",
              "      <td>41.110012</td>\n",
              "      <td>0.624959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr6</th>\n",
              "      <td>Logistic</td>\n",
              "      <td>31.713455</td>\n",
              "      <td>37.388916</td>\n",
              "      <td>0.771655</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr16</th>\n",
              "      <td>Student's t</td>\n",
              "      <td>28.08629</td>\n",
              "      <td>33.761751</td>\n",
              "      <td>0.989581</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr17</th>\n",
              "      <td>Student's t</td>\n",
              "      <td>35.282557</td>\n",
              "      <td>40.958018</td>\n",
              "      <td>0.982366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr3</th>\n",
              "      <td>Student's t</td>\n",
              "      <td>41.861609</td>\n",
              "      <td>47.53707</td>\n",
              "      <td>0.975836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr4</th>\n",
              "      <td>Student's t</td>\n",
              "      <td>39.930366</td>\n",
              "      <td>45.605827</td>\n",
              "      <td>0.939207</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d9beec67-1ab5-4d7d-8cd3-d834978f9559')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d9beec67-1ab5-4d7d-8cd3-d834978f9559 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d9beec67-1ab5-4d7d-8cd3-d834978f9559');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b205b673-3c42-4df1-9121-11bddc234675\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b205b673-3c42-4df1-9121-11bddc234675')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b205b673-3c42-4df1-9121-11bddc234675 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ],
      "source": [
        "marginals_df.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "id": "637a20b5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "637a20b5",
        "outputId": "efda69a9-af16-4cb5-9534-c6af573c6c88"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Normal', 'Logistic', \"Student's t\"], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ],
      "source": [
        "marginals_df['Distribution'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "id": "1645a6e6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "1645a6e6",
        "outputId": "61542e2b-7517-4cdb-8ef4-9d755155bfb5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Distribution, AIC, BIC, KS_pvalue]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1ef47ad1-dba3-49b5-a48a-c5b0dacdda12\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Distribution</th>\n",
              "      <th>AIC</th>\n",
              "      <th>BIC</th>\n",
              "      <th>KS_pvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ef47ad1-dba3-49b5-a48a-c5b0dacdda12')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1ef47ad1-dba3-49b5-a48a-c5b0dacdda12 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1ef47ad1-dba3-49b5-a48a-c5b0dacdda12');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ],
      "source": [
        "marginals_df[marginals_df['KS_pvalue'] < 0.05]"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c4f2f28c",
      "metadata": {
        "id": "c4f2f28c"
      },
      "source": [
        "# Fit copulas"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install git+https://github.com/syrte/ndtest"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0cMJ65L6rZ-n",
        "outputId": "8dd279e7-0984-40d5-f07a-892d56f97847"
      },
      "id": "0cMJ65L6rZ-n",
      "execution_count": 114,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting git+https://github.com/syrte/ndtest\n",
            "  Cloning https://github.com/syrte/ndtest to /tmp/pip-req-build-tlrndyh_\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/syrte/ndtest /tmp/pip-req-build-tlrndyh_\n",
            "  Resolved https://github.com/syrte/ndtest to commit 29ced2bfd65a3b8f51587cd5aa90ea19aa85e568\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from ndtest==0.1) (1.23.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from ndtest==0.1) (1.11.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install copulas"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kEPCxG81Kx_-",
        "outputId": "c1e9534a-a96b-4caa-87b1-4e4bcf8f53ca"
      },
      "id": "kEPCxG81Kx_-",
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: copulas in /usr/local/lib/python3.10/dist-packages (0.10.0)\n",
            "Requirement already satisfied: plotly<6,>=5.10.0 in /usr/local/lib/python3.10/dist-packages (from copulas) (5.15.0)\n",
            "Requirement already satisfied: numpy<2,>=1.23.3 in /usr/local/lib/python3.10/dist-packages (from copulas) (1.23.5)\n",
            "Requirement already satisfied: scipy<2,>=1.9.2 in /usr/local/lib/python3.10/dist-packages (from copulas) (1.11.4)\n",
            "Requirement already satisfied: pandas>=1.3.4 in /usr/local/lib/python3.10/dist-packages (from copulas) (1.5.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.4->copulas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.4->copulas) (2023.3.post1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly<6,>=5.10.0->copulas) (8.2.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from plotly<6,>=5.10.0->copulas) (23.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=1.3.4->copulas) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "id": "8203e46e",
      "metadata": {
        "id": "8203e46e"
      },
      "outputs": [],
      "source": [
        "from copulas import *\n",
        "import ndtest # bivariate Kolmogorov-Smirnov"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def log_likelihood(dataframe, model):\n",
        "  \"\"\"Calculates the log-likelihood of a dataframe under a model.\n",
        "\n",
        "  Args:\n",
        "    dataframe: A Pandas DataFrame containing the data.\n",
        "    model: A statistical model.\n",
        "\n",
        "  Returns:\n",
        "    The log-likelihood of the dataframe under the model.\n",
        "  \"\"\"\n",
        "\n",
        "  log_likelihoods = []\n",
        "  for i in range(len(dataframe)):\n",
        "    data_point = dataframe.iloc[i]\n",
        "    probability = model.predict(data_point)\n",
        "    log_likelihood = np.log(probability)\n",
        "    log_likelihoods.append(log_likelihood)\n",
        "\n",
        "  return np.sum(log_likelihoods)"
      ],
      "metadata": {
        "id": "evW5APNgMZS0"
      },
      "id": "evW5APNgMZS0",
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "u"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hlh--Ylvo2De",
        "outputId": "c5e16305-0b86-4374-d1ce-80583e4879ff"
      },
      "id": "hlh--Ylvo2De",
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.5])"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 155,
      "id": "2ebd1e79",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ebd1e79",
        "outputId": "ac83499c-12be-42ca-b8f1-18a9b96ea6b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n"
          ]
        }
      ],
      "source": [
        "copulas_df = pd.DataFrame(index=selected_pairs, columns=['copula', 'parameter', 'aic', 'bic', 'KS_pvalue'])\n",
        "from copulas.multivariate import GaussianMultivariate\n",
        "\n",
        "\n",
        "for pair in selected_pairs:\n",
        "    s1,s2 = parse_pair(pair)\n",
        "    # fit marginals\n",
        "    params_s1 = stats.t.fit(returns_form[s1])\n",
        "    dist_s1 = stats.t(*params_s1)\n",
        "    params_s2 = stats.t.fit(returns_form[s2])\n",
        "    dist_s2 = stats.t(*params_s2)\n",
        "    # apply probability integral transform\n",
        "    u = dist_s1.cdf(returns_form[s1])\n",
        "    v = dist_s2.cdf(returns_form[s2])\n",
        "\n",
        "    best_aic = np.inf\n",
        "\n",
        "    for copula in [GaussianMultivariate()]:\n",
        "        copula.fit(u)\n",
        "        synthetic_data = copula.sample(num_rows=100)\n",
        "        L =(copula.log_probability_density(synthetic_data))\n",
        "        aic = 2 * len(copula.to_dict()) - 2 * L\n",
        "        best_aic = aic\n",
        "        best_bic = len(copula.to_dict()) * np.log(len(u)) - 2 * L\n",
        "        best_copula = copula\n",
        "            # calculate KS-pvalue\n",
        "        smp = copula.sample(len(u)) # generate sample from fit copula\n",
        "        copula.fit(v)\n",
        "        smv = copula.sample(len(v))\n",
        "        smv=smv.to_numpy()\n",
        "        smp=smp.to_numpy()\n",
        "        smv=np.reshape(smv,(49,))\n",
        "        smp=np.reshape(smp,(49,))\n",
        "        ks_pval= ndtest.ks2d2s(u,v,smp,smv)\n",
        "        best_param = copula.to_dict()\n",
        "\n",
        "    copulas_df.loc[pair] = [best_copula, best_param, best_aic, best_bic, ks_pval]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 156,
      "id": "26ccd7de",
      "metadata": {
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "26ccd7de",
        "outputId": "e08cb1d7-d1f1-4e6b-9c46-d7866910f781"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 copula  \\\n",
              "Instr11-Instr12  GaussianMultivariate()   \n",
              "Instr8-Instr9    GaussianMultivariate()   \n",
              "Instr5-Instr6    GaussianMultivariate()   \n",
              "Instr16-Instr17  GaussianMultivariate()   \n",
              "Instr3-Instr4    GaussianMultivariate()   \n",
              "Instr7-Instr10   GaussianMultivariate()   \n",
              "Instr1-Instr2    GaussianMultivariate()   \n",
              "\n",
              "                                                         parameter  \\\n",
              "Instr11-Instr12  {'correlation': [[1.0]], 'univariates': [{'loc...   \n",
              "Instr8-Instr9    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr5-Instr6    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr16-Instr17  {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr3-Instr4    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr7-Instr10   {'correlation': [[1.0]], 'univariates': [{'a':...   \n",
              "Instr1-Instr2    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "\n",
              "                                                               aic  \\\n",
              "Instr11-Instr12  [10.945875969436377, 9.872961642186889, 13.201...   \n",
              "Instr8-Instr9    [9.837900075984889, 10.071857041694972, 9.9143...   \n",
              "Instr5-Instr6    [9.837975269261115, 11.353314542657166, 10.462...   \n",
              "Instr16-Instr17  [11.277464739839763, 12.395602316233065, 9.883...   \n",
              "Instr3-Instr4    [9.84108093420927, 10.342401887740966, 10.0925...   \n",
              "Instr7-Instr10   [14.51212875108769, 12.06815944749146, 9.97146...   \n",
              "Instr1-Instr2    [9.90774418171833, 10.693821681850777, 10.1804...   \n",
              "\n",
              "                                                               bic KS_pvalue  \n",
              "Instr11-Instr12  [18.513157161878883, 17.440242834629395, 20.76...  0.008488  \n",
              "Instr8-Instr9    [17.405181268427395, 17.639138234137477, 17.48...  0.003173  \n",
              "Instr5-Instr6    [17.405256461703623, 18.920595735099674, 18.03...  0.077479  \n",
              "Instr16-Instr17  [18.84474593228227, 19.96288350867557, 17.4504...  0.036113  \n",
              "Instr3-Instr4    [17.408362126651774, 17.90968308018347, 17.659...  0.008459  \n",
              "Instr7-Instr10   [22.079409943530194, 19.635440639933968, 17.53...  0.008514  \n",
              "Instr1-Instr2    [17.475025374160836, 18.261102874293282, 17.74...  0.003089  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a809bf2c-f5a1-418a-a5cd-a5572c76d6ab\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>copula</th>\n",
              "      <th>parameter</th>\n",
              "      <th>aic</th>\n",
              "      <th>bic</th>\n",
              "      <th>KS_pvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Instr11-Instr12</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'loc...</td>\n",
              "      <td>[10.945875969436377, 9.872961642186889, 13.201...</td>\n",
              "      <td>[18.513157161878883, 17.440242834629395, 20.76...</td>\n",
              "      <td>0.008488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr8-Instr9</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.837900075984889, 10.071857041694972, 9.9143...</td>\n",
              "      <td>[17.405181268427395, 17.639138234137477, 17.48...</td>\n",
              "      <td>0.003173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr5-Instr6</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.837975269261115, 11.353314542657166, 10.462...</td>\n",
              "      <td>[17.405256461703623, 18.920595735099674, 18.03...</td>\n",
              "      <td>0.077479</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr16-Instr17</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[11.277464739839763, 12.395602316233065, 9.883...</td>\n",
              "      <td>[18.84474593228227, 19.96288350867557, 17.4504...</td>\n",
              "      <td>0.036113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr3-Instr4</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.84108093420927, 10.342401887740966, 10.0925...</td>\n",
              "      <td>[17.408362126651774, 17.90968308018347, 17.659...</td>\n",
              "      <td>0.008459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr7-Instr10</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'a':...</td>\n",
              "      <td>[14.51212875108769, 12.06815944749146, 9.97146...</td>\n",
              "      <td>[22.079409943530194, 19.635440639933968, 17.53...</td>\n",
              "      <td>0.008514</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr2</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.90774418171833, 10.693821681850777, 10.1804...</td>\n",
              "      <td>[17.475025374160836, 18.261102874293282, 17.74...</td>\n",
              "      <td>0.003089</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a809bf2c-f5a1-418a-a5cd-a5572c76d6ab')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a809bf2c-f5a1-418a-a5cd-a5572c76d6ab button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a809bf2c-f5a1-418a-a5cd-a5572c76d6ab');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-82bf4733-208a-4e30-81c2-32c6b832a00a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-82bf4733-208a-4e30-81c2-32c6b832a00a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-82bf4733-208a-4e30-81c2-32c6b832a00a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 156
        }
      ],
      "source": [
        "copulas_df.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 157,
      "id": "154dab74",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "154dab74",
        "outputId": "ba10a654-595d-4c3e-f42d-aa57d0bb7a91"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([GaussianMultivariate(), GaussianMultivariate(),\n",
              "       GaussianMultivariate(), GaussianMultivariate(),\n",
              "       GaussianMultivariate(), GaussianMultivariate(),\n",
              "       GaussianMultivariate()], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 157
        }
      ],
      "source": [
        "copulas_df['copula'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 158,
      "id": "ddeda9e6",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 341
        },
        "id": "ddeda9e6",
        "outputId": "b499929f-0621-45a0-d5d8-58e992af2c94"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                 copula  \\\n",
              "Instr11-Instr12  GaussianMultivariate()   \n",
              "Instr8-Instr9    GaussianMultivariate()   \n",
              "Instr16-Instr17  GaussianMultivariate()   \n",
              "Instr3-Instr4    GaussianMultivariate()   \n",
              "Instr7-Instr10   GaussianMultivariate()   \n",
              "Instr1-Instr2    GaussianMultivariate()   \n",
              "\n",
              "                                                         parameter  \\\n",
              "Instr11-Instr12  {'correlation': [[1.0]], 'univariates': [{'loc...   \n",
              "Instr8-Instr9    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr16-Instr17  {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr3-Instr4    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "Instr7-Instr10   {'correlation': [[1.0]], 'univariates': [{'a':...   \n",
              "Instr1-Instr2    {'correlation': [[1.0]], 'univariates': [{'dat...   \n",
              "\n",
              "                                                               aic  \\\n",
              "Instr11-Instr12  [10.945875969436377, 9.872961642186889, 13.201...   \n",
              "Instr8-Instr9    [9.837900075984889, 10.071857041694972, 9.9143...   \n",
              "Instr16-Instr17  [11.277464739839763, 12.395602316233065, 9.883...   \n",
              "Instr3-Instr4    [9.84108093420927, 10.342401887740966, 10.0925...   \n",
              "Instr7-Instr10   [14.51212875108769, 12.06815944749146, 9.97146...   \n",
              "Instr1-Instr2    [9.90774418171833, 10.693821681850777, 10.1804...   \n",
              "\n",
              "                                                               bic KS_pvalue  \n",
              "Instr11-Instr12  [18.513157161878883, 17.440242834629395, 20.76...  0.008488  \n",
              "Instr8-Instr9    [17.405181268427395, 17.639138234137477, 17.48...  0.003173  \n",
              "Instr16-Instr17  [18.84474593228227, 19.96288350867557, 17.4504...  0.036113  \n",
              "Instr3-Instr4    [17.408362126651774, 17.90968308018347, 17.659...  0.008459  \n",
              "Instr7-Instr10   [22.079409943530194, 19.635440639933968, 17.53...  0.008514  \n",
              "Instr1-Instr2    [17.475025374160836, 18.261102874293282, 17.74...  0.003089  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a60be482-6a6e-41f9-bef3-d5d255d3f74a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>copula</th>\n",
              "      <th>parameter</th>\n",
              "      <th>aic</th>\n",
              "      <th>bic</th>\n",
              "      <th>KS_pvalue</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Instr11-Instr12</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'loc...</td>\n",
              "      <td>[10.945875969436377, 9.872961642186889, 13.201...</td>\n",
              "      <td>[18.513157161878883, 17.440242834629395, 20.76...</td>\n",
              "      <td>0.008488</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr8-Instr9</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.837900075984889, 10.071857041694972, 9.9143...</td>\n",
              "      <td>[17.405181268427395, 17.639138234137477, 17.48...</td>\n",
              "      <td>0.003173</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr16-Instr17</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[11.277464739839763, 12.395602316233065, 9.883...</td>\n",
              "      <td>[18.84474593228227, 19.96288350867557, 17.4504...</td>\n",
              "      <td>0.036113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr3-Instr4</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.84108093420927, 10.342401887740966, 10.0925...</td>\n",
              "      <td>[17.408362126651774, 17.90968308018347, 17.659...</td>\n",
              "      <td>0.008459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr7-Instr10</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'a':...</td>\n",
              "      <td>[14.51212875108769, 12.06815944749146, 9.97146...</td>\n",
              "      <td>[22.079409943530194, 19.635440639933968, 17.53...</td>\n",
              "      <td>0.008514</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Instr1-Instr2</th>\n",
              "      <td>GaussianMultivariate()</td>\n",
              "      <td>{'correlation': [[1.0]], 'univariates': [{'dat...</td>\n",
              "      <td>[9.90774418171833, 10.693821681850777, 10.1804...</td>\n",
              "      <td>[17.475025374160836, 18.261102874293282, 17.74...</td>\n",
              "      <td>0.003089</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a60be482-6a6e-41f9-bef3-d5d255d3f74a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a60be482-6a6e-41f9-bef3-d5d255d3f74a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a60be482-6a6e-41f9-bef3-d5d255d3f74a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cb427d03-c0b3-4057-a9e2-a5a895cbd679\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cb427d03-c0b3-4057-a9e2-a5a895cbd679')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cb427d03-c0b3-4057-a9e2-a5a895cbd679 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 158
        }
      ],
      "source": [
        "copulas_df[copulas_df['KS_pvalue']<0.05]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 166,
      "id": "0ae5481c",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0ae5481c",
        "outputId": "f464fa45-6ab1-4493-d1cb-1d9d51b1e526"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/stats/_continuous_distns.py:5999: RuntimeWarning: divide by zero encountered in divide\n",
            "  return c**2 / (c**2 - n**2)\n",
            "/usr/local/lib/python3.10/dist-packages/scipy/optimize/_optimize.py:404: RuntimeWarning: Values in x were outside bounds during a minimize step, clipping to bounds\n",
            "  warnings.warn(\"Values in x were outside bounds during a \"\n"
          ]
        }
      ],
      "source": [
        "algo_returns = {}\n",
        "cl = 0.99 # confidence level\n",
        "\n",
        "for pair in selected_pairs:\n",
        "    s1,s2 = parse_pair(pair)\n",
        "\n",
        "    # fit marginals\n",
        "    params_s1 = stats.t.fit(returns_form[s1])\n",
        "    dist_s1 = stats.t(*params_s1)\n",
        "    params_s2 = stats.t.fit(returns_form[s2])\n",
        "    dist_s2 = stats.t(*params_s2)\n",
        "\n",
        "    # transform marginals\n",
        "    u = dist_s1.cdf(returns_form[s1])\n",
        "    v = dist_s2.cdf(returns_form[s2])\n",
        "\n",
        "    # fit copula\n",
        "    best_aic = np.inf\n",
        "    best_copula = None\n",
        "\n",
        "    copulas = [GaussianMultivariate()]\n",
        "    for copula in copulas:\n",
        "        copula.fit(u)\n",
        "        synthetic_data = copula.sample(num_rows=118)\n",
        "        L =np.average(copula.log_probability_density(synthetic_data))\n",
        "        aic = 2 * len(copula.to_dict()) - 2 * L\n",
        "        copula.fit(v)\n",
        "        synthetic_data1 = copula.sample(num_rows=118)\n",
        "        if aic < best_aic:\n",
        "            best_aic = aic\n",
        "            best_copula = copula\n",
        "\n",
        "    # calculate conditional probabilities\n",
        "    prob_s1 = []\n",
        "    prob_s2 = []\n",
        "\n",
        "    for u,v in zip(dist_s1.cdf(returns_trade[s1]), dist_s2.cdf(returns_trade[s2])):\n",
        "\n",
        "        prob_s1.append(best_copula.cdf(synthetic_data))\n",
        "        prob_s2.append(best_copula.cdf(synthetic_data1))\n",
        "    probs_trade = pd.DataFrame(np.vstack([prob_s1, prob_s2]))\n",
        "\n",
        "    # calculate positions\n",
        "    positions = pd.DataFrame(index=probs_trade.index, columns=probs_trade.columns)\n",
        "    long = False\n",
        "    short = False\n",
        "\n",
        "    for t in positions.index:\n",
        "        # if long position is open\n",
        "        if long:\n",
        "            if (probs_trade.loc[t][s1] > 0.5) or (probs_trade.loc[t][s2] < 0.5):\n",
        "                positions.loc[t] = [0,0]\n",
        "                long = False\n",
        "            else:\n",
        "                positions.loc[t] = [1,-1]\n",
        "\n",
        "        # if short position is open\n",
        "        elif short:\n",
        "            if (probs_trade.loc[t][s1] < 0.5) or (probs_trade.loc[t][s2] > 0.5):\n",
        "                positions.loc[t] = [0,0]\n",
        "                short = False\n",
        "            else:\n",
        "                positions.loc[t] = [-1,1]\n",
        "\n",
        "\n",
        "    # calculate returns\n",
        "    algo_ret = (returns_trade * positions.shift()).sum(axis=1)\n",
        "    algo_returns[pair] = algo_ret"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 167,
      "id": "e77b4753",
      "metadata": {
        "id": "e77b4753"
      },
      "outputs": [],
      "source": [
        "returns = pd.DataFrame.from_dict(algo_returns)\n",
        "returns = np.exp(returns) - 1 # convert log-returns to simple returns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 168,
      "id": "1c6de59b",
      "metadata": {
        "id": "1c6de59b"
      },
      "outputs": [],
      "source": [
        "total_ret = returns.sum(axis=1) / len(returns.columns) * 2 # double capital (from short positions)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 169,
      "id": "ac4d9394",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ac4d9394",
        "outputId": "b1b1f438-3ed1-4d0e-dbec-1bb24f9de670"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\r[*********************100%%**********************]  1 of 1 completed"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "ERROR:yfinance:\n",
            "1 Failed download:\n",
            "ERROR:yfinance:['VBR']: ValueError(\"time data '11/19/2021' does not match format '%Y-%m-%d'\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "vbr_price = yf.download('VBR', start=trade_start, end=trade_end)\n",
        "vbr_price = vbr_price['Adj Close']\n",
        "vbr_ret = vbr_price.pct_change().dropna()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 170,
      "id": "c8cc8432",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "c8cc8432",
        "outputId": "f92390ad-fbb5-490b-bda8-ae222acad304"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7add212d6b90>"
            ]
          },
          "metadata": {},
          "execution_count": 170
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(18,6))\n",
        "plt.plot(np.nancumprod(total_ret + 1), label='algo')\n",
        "plt.plot(np.nancumprod(vbr_ret + 1), label='VBR')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 171,
      "id": "7416f552",
      "metadata": {
        "id": "7416f552"
      },
      "outputs": [],
      "source": [
        "def calculate_metrics(cumret):\n",
        "    '''\n",
        "    calculate performance metrics from cumulative returns\n",
        "    '''\n",
        "    total_return = (cumret[-1] - cumret[0])/cumret[0]\n",
        "    apr = (1+total_return)**(252/len(cumret)) - 1\n",
        "    rets = pd.DataFrame(cumret).pct_change()\n",
        "    sharpe = np.sqrt(252) * np.nanmean(rets) / np.nanstd(rets)\n",
        "\n",
        "    # maxdd and maxddd\n",
        "    highwatermark=np.zeros(cumret.shape)\n",
        "    drawdown=np.zeros(cumret.shape)\n",
        "    drawdownduration=np.zeros(cumret.shape)\n",
        "    for t in np.arange(1, cumret.shape[0]):\n",
        "        highwatermark[t]=np.maximum(highwatermark[t-1], cumret[t])\n",
        "        drawdown[t]=cumret[t]/highwatermark[t]-1\n",
        "        if drawdown[t]==0:\n",
        "            drawdownduration[t]=0\n",
        "        else:\n",
        "            drawdownduration[t]=drawdownduration[t-1]+1\n",
        "    maxDD=np.min(drawdown)\n",
        "    maxDDD=np.max(drawdownduration)\n",
        "\n",
        "    return total_return, apr, sharpe, maxDD, maxDDD"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 172,
      "id": "c5c0c01f",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 383
        },
        "id": "c5c0c01f",
        "outputId": "59619cdd-49f1-4c44-cb2f-67cd477f88df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-171-8ed914f6bee2>:8: RuntimeWarning: invalid value encountered in double_scalars\n",
            "  sharpe = np.sqrt(252) * np.nanmean(rets) / np.nanstd(rets)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-172-66f6a6fcba3e>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Algo'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'VBR'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Total return'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'APR'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Sharpe'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MaxDD'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'MaxDDD'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Algo'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalculate_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnancumprod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtotal_ret\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'VBR'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalculate_metrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnancumprod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvbr_ret\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-171-8ed914f6bee2>\u001b[0m in \u001b[0;36mcalculate_metrics\u001b[0;34m(cumret)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mcalculate\u001b[0m \u001b[0mperformance\u001b[0m \u001b[0mmetrics\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mcumulative\u001b[0m \u001b[0mreturns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     '''\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mtotal_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcumret\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcumret\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mcumret\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0mapr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mtotal_return\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m252\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcumret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mrets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcumret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpct_change\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: index -1 is out of bounds for axis 0 with size 0"
          ]
        }
      ],
      "source": [
        "metrics = pd.DataFrame(index=['Algo', 'VBR'], columns=['Total return', 'APR', 'Sharpe', 'MaxDD', 'MaxDDD'])\n",
        "metrics.loc['Algo'] = calculate_metrics(np.nancumprod(total_ret + 1))\n",
        "metrics.loc['VBR'] = calculate_metrics(np.nancumprod(vbr_ret + 1))\n",
        "metrics"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8f8782d4",
      "metadata": {
        "id": "8f8782d4"
      },
      "source": [
        "# Exit earlier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 173,
      "id": "5a2332c8",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "5a2332c8",
        "outputId": "0b0566e8-0666-4f89-ebaa-7cd5452c293d"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-173-3aa13d3f8268>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mbest_copula\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m     \u001b[0mcopulas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mGaussianCopula\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mClaytonCopula\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mGumbelCopula\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFrankCopula\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mJoeCopula\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mcopula\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcopulas\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0mcopula\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'GaussianCopula' is not defined"
          ]
        }
      ],
      "source": [
        "algo_returns = {}\n",
        "cl = 0.99 # confidence level\n",
        "\n",
        "for pair in selected_pairs:\n",
        "    s1,s2 = parse_pair(pair)\n",
        "\n",
        "    # fit marginals\n",
        "    params_s1 = stats.t.fit(returns_form[s1])\n",
        "    dist_s1 = stats.t(*params_s1)\n",
        "    params_s2 = stats.t.fit(returns_form[s2])\n",
        "    dist_s2 = stats.t(*params_s2)\n",
        "\n",
        "    # transform marginals\n",
        "    u = dist_s1.cdf(returns_form[s1])\n",
        "    v = dist_s2.cdf(returns_form[s2])\n",
        "\n",
        "    # fit copula\n",
        "    best_aic = np.inf\n",
        "    best_copula = None\n",
        "\n",
        "    copulas = [GaussianCopula(), ClaytonCopula(), GumbelCopula(), FrankCopula(), JoeCopula()]\n",
        "    for copula in copulas:\n",
        "        copula.fit(u,v)\n",
        "        L = copula.log_likelihood(u,v)\n",
        "        aic = 2 * copula.num_params - 2 * L\n",
        "        if aic < best_aic:\n",
        "            best_aic = aic\n",
        "            best_copula = copula\n",
        "\n",
        "    # calculate conditional probabilities\n",
        "    prob_s1 = []\n",
        "    prob_s2 = []\n",
        "\n",
        "    for u,v in zip(dist_s1.cdf(returns_trade[s1]), dist_s2.cdf(returns_trade[s2])):\n",
        "        prob_s1.append(best_copula.cdf_u_given_v(u,v))\n",
        "        prob_s2.append(best_copula.cdf_v_given_u(u,v))\n",
        "\n",
        "    probs_trade = pd.DataFrame(np.vstack([prob_s1, prob_s2]).T, index=returns_trade.index, columns=[s1, s2])\n",
        "\n",
        "    # calculate positions\n",
        "    positions = pd.DataFrame(index=probs_trade.index, columns=probs_trade.columns)\n",
        "    long = False\n",
        "    short = False\n",
        "\n",
        "    for t in positions.index:\n",
        "        # if long position is open\n",
        "        if long:\n",
        "            if (probs_trade.loc[t][s1] > 0.3) or (probs_trade.loc[t][s2] < 0.7):\n",
        "                positions.loc[t] = [0,0]\n",
        "                long = False\n",
        "            else:\n",
        "                positions.loc[t] = [1,-1]\n",
        "\n",
        "        # if short position is open\n",
        "        elif short:\n",
        "            if (probs_trade.loc[t][s1] < 0.7) or (probs_trade.loc[t][s2] > 0.3):\n",
        "                positions.loc[t] = [0,0]\n",
        "                short = False\n",
        "            else:\n",
        "                positions.loc[t] = [-1,1]\n",
        "\n",
        "        # if no positions are open\n",
        "        else:\n",
        "            if (probs_trade.loc[t][s1] < (1-cl)) and (probs_trade.loc[t][s2] > cl):\n",
        "                # open long position\n",
        "                positions.loc[t] = [1,-1]\n",
        "                long = True\n",
        "            elif (probs_trade.loc[t][s1] > cl) and (probs_trade.loc[t][s2] < (1-cl)):\n",
        "                # open short positions\n",
        "                positions.loc[t] = [-1,1]\n",
        "                short = True\n",
        "            else:\n",
        "                positions.loc[t] = [0,0]\n",
        "\n",
        "    # calculate returns\n",
        "    algo_ret = (returns_trade * positions.shift()).sum(axis=1)\n",
        "    algo_returns[pair] = algo_ret"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c95bc945",
      "metadata": {
        "id": "c95bc945"
      },
      "outputs": [],
      "source": [
        "returns = pd.DataFrame.from_dict(algo_returns)\n",
        "returns = np.exp(returns) - 1 # convert log-returns to simple returns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "365f503e",
      "metadata": {
        "id": "365f503e"
      },
      "outputs": [],
      "source": [
        "total_ret = returns.sum(axis=1) / len(returns.columns) * 2 # double capital (from short positions)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4d73efdc",
      "metadata": {
        "id": "4d73efdc",
        "outputId": "ebc6efd5-f724-46e5-f0ef-6d9f64150197"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f48f9655df0>"
            ]
          },
          "execution_count": 56,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1296x432 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(18,6))\n",
        "plt.plot(np.nancumprod(total_ret + 1), label='algo')\n",
        "plt.plot(np.nancumprod(vbr_ret + 1), label='VBR')\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d011b9fd",
      "metadata": {
        "id": "d011b9fd",
        "outputId": "6bf12611-d44a-4417-b324-c815050df0ea"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Total return</th>\n",
              "      <th>APR</th>\n",
              "      <th>Sharpe</th>\n",
              "      <th>MaxDD</th>\n",
              "      <th>MaxDDD</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Algo</th>\n",
              "      <td>0.024795</td>\n",
              "      <td>0.049009</td>\n",
              "      <td>2.75403</td>\n",
              "      <td>-0.004165</td>\n",
              "      <td>33.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VBR</th>\n",
              "      <td>0.069689</td>\n",
              "      <td>0.143021</td>\n",
              "      <td>0.867726</td>\n",
              "      <td>-0.096744</td>\n",
              "      <td>96.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     Total return       APR    Sharpe     MaxDD MaxDDD\n",
              "Algo     0.024795  0.049009   2.75403 -0.004165   33.0\n",
              "VBR      0.069689  0.143021  0.867726 -0.096744   96.0"
            ]
          },
          "execution_count": 57,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "metrics = pd.DataFrame(index=['Algo', 'VBR'], columns=['Total return', 'APR', 'Sharpe', 'MaxDD', 'MaxDDD'])\n",
        "metrics.loc['Algo'] = calculate_metrics(np.nancumprod(total_ret + 1))\n",
        "metrics.loc['VBR'] = calculate_metrics(np.nancumprod(vbr_ret + 1))\n",
        "metrics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "218f8c5f",
      "metadata": {
        "id": "218f8c5f"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
